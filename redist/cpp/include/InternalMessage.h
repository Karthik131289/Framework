#ifndef __INTERNALMESSAGE_H__
#define __INTERNALMESSAGE_H__
#include "DataObject.h"
#include "Message.h"
#include "TransformContext.h"

VOLANTE_NAMESPACE_BEGIN

/**
*  The external interface for using a business transaction component generated by the designer. 
*  The business transaction object can be looked up by name using an environment specific context
*  object or using TriggerContext. 
*
*  <p>Typically, the input format component passes the normalized object to the BusinessTransaction 
*  component for processing.
*
*  <p>A trigger or client code can also look up a business transaction and pass normalized object to it. The 
*  BusinessTransaction validates, processes the object and passes it to application 
*  defined triggers. 
*
*  <p>The BusinessTransaction is responsible for,
*  <ul>
*    <li> Preprocessing the Normalized Object
*    <li> Validating the Normalized Object
*    <li> PostProcessing the Normalized Object
*    <li> Passing the Normalized Object to the triggers
*  </ul>
*
*  @see ILookupContext#lookupInternalMessage
*  @see InputFormat
*  @see OutputFormat
*/
class VOLANTE_EXPORT IInternalMessage : public IMessage {
public:
	/**
	*  Creates a raw normalized object (associated with this Internal Mesage).
	*  This method can be used to avoid hard-coding the name of the normalized object class.
	*  The  returned object must be deleted by the caller.
	*  @return An unintialized Normalized Object.
	*/
	virtual DataObject* createNormalizedObject() = 0;
	/**
	*  Processes the normalized object.
	*  <p>This method is responsible for,
	*  <ul>
	*    <li> Preprocessing the Normalized Object
	*    <li> Validating the Normalized Object
	*    <li> PostProcessing the Normalized Object
	*    <li> Passing the Normalized Object to the triggers
	*  </ul>
	*  @param obj The Normalized Object to be processed
	*  @param tcxt The context in which the processing (transformation) is done.
	*  @deprecated
	*/
	virtual void handleNormalizedObject(NormalizedObject* obj, TransformContext& tcxt) = 0;

	/**
	* Executes the preprocessing rules specified for the internal message.
	* <p>
	* The object 'obj' is preprocessesed and  may have been modified.
	*
	* <pre>
	*    myMessage->preprocess(obj, cxt);
	* </pre>
	* @param nobj The object to be processed
	* @param cxt The context in which parsing is done. This is typically used for passing additional options.
	*/
	virtual DataObjectVal preprocess(const DataObjectVal& nobj, TransformContext& cxt) = 0;

	/**
	* Executes the preprocessing rules specified for the internal message.
	* <p>
	* The object 'obj' is preprocessesed and  may have been modified.
	*
	* <pre>
	*    myMessage->preprocess(obj, cxt);
	* </pre>
	* @param nobj The object to be processed
	* @param cxt The context in which parsing is done. This is typically used for passing additional options.
	*/
	virtual Result<DataObjectVal> preprocess2(const DataObjectVal& nobj, TransformContext& cxt)= 0;
	virtual Result<DataObjectVal> process2(const vstring& name, const DataObjectVal& nobj, TransformContext& cxt) =0;

	/**
	* Executes the postprocessing rules specified for the internal message.
	* <p>
	* The object 'obj' is postprocessesed and may have been modified.
	*
	* <pre>
	*    myMessage.preprocess(obj, cxt);
	* </pre>
	* @param nobj The object to be processed
	* @param cxt The context in which parsing is done. This is typically used for passing additional options.
	*/
	virtual DataObjectVal postprocess(const DataObjectVal& nobj, TransformContext& cxt)= 0;
	virtual DataObjectVal process(const vstring& name, const DataObjectVal& obj, TransformContext& cxt) = 0;

	/**
	* Executes the postprocessing rules specified for the internal message.
	* <p>
	* The object 'obj' is postprocessesed and may have been modified.
	*
	* <pre>
	*    myMessage->preprocess(obj, cxt);
	* </pre>
	* @param nobj The object to be processed
	* @param cxt The context in which parsing is done. This is typically used for passing additional options.
	*/
	virtual Result<DataObjectVal> postprocess2(const DataObjectVal& nobj, TransformContext& cxt) = 0;
};

typedef SmartPtr<IInternalMessage> InternalMessage;

// For 2.4.x compatablity
typedef IInternalMessage IBusinessTransaction;
typedef SmartPtr<IBusinessTransaction> BusinessTransaction;

VOLANTE_NAMESPACE_END



#endif //__INTERNALMESSAGE_H__
